Data Modeling

Step1:
	Users: 
		Internal(80%) 
			who making business (not tech) decision
			Internal employees, team
			e.g. Reporting Appliation for hospital
				-Floor performance(head, manager)
				-provider(doctor,nurse, how offer services)
				-patient feedback
				-appointment scheduling
				-ER availability
		External
			public ursers (out of orgnization)
			e.g.
				Patient portal
				-Schedule appointment
				-visit summary
				-payments
				Website: best buy
	Meeting:		
		Joint Requirment Definition - JRD -->Joint Application Design - JAD

		Alternative Methods:

		Face to Face interviews
		--> Anonymous Qestionaires 
		--> Feedback Surveys or Equivalent
	

	Requirment session: 
				Business Required Document - BRD 
				Users, tech, managers, tech ceads, sr.developers, BA, DA, PM.
				Time: depend on scoup of application
					Small (2 weeks -- 2 months)
					Huge (1 week -- 6 months)
			--> Function Requirment Document -FRD
		Alternative: 
				Stakeholder Analysis
					Find all those involved
				Business Analysis Plan
					Budget, strategy
				Current State Analysis(same as BRD)
					
				Scope Statement Specification
		Business Requirment Document (from BA, word templates,share by share point(SP), Team Foundation Server(TFS), Git)
	Why:
		Track changes
		Share information among all persons
		Finalize and find agreement on requirements
		Prevent changes or legal issues


	How Methodologies:
		Waterfall
		Scrum
		Agile
		Spiral
	Variables to Monitor( How to choice methods):
		Requirments
		Schedule/Time of Year
		Budget
		Size of Project
		Size of Team

	Assenment: Hospital Mnagement, Health Insurance lceares, Auto Insurance
		1. BRD - No more than 2 paragraphs
	
	Research Questions:
		1. What is your style of gethering requirements?
		2. How do you prepare 
		3. What is GAP analysisw

	Documents:
		FRD,SDS, SDD, TDS, TDD
			-Naning convenisions
			-Steps for deployment
			-Permission on a folder/DB/Server
		Data Dictionary
			-Information about database
				-Tables
				-Columns
				-Datatypes
				-Sample
				-Application(Optional)
		Mapping Document
			1.ETL Process(Load data in sperate DB into one large total DB)
			2.Upgrade DB Version (EX. ss2012-->SS2017)
			3.Migrate From different DB System(EX.oracle-->SS)
		QA Docs
		RTM - Requirment Traceability Matrix: Map a reqirement to a test case
			Unit test case document(Dev): ETL package testing carried out on a particular unit of development such as procedure, function, report, ssis package
				Pre-requisites
				1.Report is deployed correctly
				2.Browser is available with required URL and permissions to run
					EX
					Case#|Steps|ExpectedResult|Actual Result|Status|Priority
						1|1.Open report; 2.Click on drop down for report Month|User sees all 12 months with full names|Month Numbers|Failed|2|
			Test Strategy Document(QA): similar to FRD(Functional Requirements)
			Test Plan(QA): Plan for whole application testing
			Test Case Document(QA): More detailed and involveds lot more senarios + Case are for complete software/application

Step2:
	Methodologies: Step by step process to execute an application
		Steps: Requirment Analysis --> System Design --> Implementation --> Testing --> Deployment --> Maintenance
		-Waterfall
			Gather complete REQ (not flexible, time sensitive, Not visibility, cannot add new requirment later)
		-Agile(Parallel)
			Not a specific method. It's a principle , guide lines, or rules
			1. Work is divided into sprints
				short -small ,portion of work developed at a fast pace ( < 4 weeks)
			2. Instead of documentation agles uses user stories(seperate sotries not the whole requirments)
			3. Each sprint prouides usable delivery which improves visibility to users
			4. Because of earlier visibility to user, we can incorporate user feed back
		-Scrum(one kind of Agile)
			Meetings:
				1.Sprint plan(Begining of the sprint,prepare and plan the sprint, set sprint goal and sprint backlog)
				2.Daliy scrum(what did you do yesterday? What will you do today? Are there any obstacles? Every day)
				3.Sprint review(users reviews, demo features, updated backlog)
				4.Restrospective(Do not have user, try to solve and avoid wrongs with team number, identify ways of improving, end of sprint)
				5.Product backlog grooming(Clarify product backlog items in preparation for sprint planning, before sprint planning)
			Rules:
				1,product owner(jia fang)
					Gather user stories related to the project (product backlog)
					-Story points(How many hours will be cost for each stories, if product owner don't know about tech, scrum master or team make this)
					-Assign priority to the tasks
				2.Scrum master
					1.What did you do yesterday
					2. waht is the plan for today
					3. any road blockes
				3.scrum team
		-Spiral
			For every long and complex projects
			Waterfull manytimes
			1.Identification
			2.Design
			3.Construct or Build
			4.Evaluation and Risk Analysis 
				if need to upgrade, go 1
				if do not proceed, stop,abandon
				if complete, stop



Data Modeling Life Cycle

	1. Conceptual
		Focus on information, not data
		EX. Book
			Businness questions: How many books we sale, who is the fisrt pority
			Book INFO(Name,price)
			Author INFO(gender, DOB)
			How Authors related to books
			Order details(Date, costom, QTY, price,discount)
			Author country details
	2. Logical
		Tools:ERWIN, ER Studio, Visio
		Output: Logical model
		Normalizaion here
		Genrate SQL scripts(Generally not, and will not use in the real system, maybe use to track change)
		Relationship between tables
		EX. 
			M : M
	3. Pysical
		Tools: DB, CSS, ORACLE
		1 : M joint M : 1
	
KEYS:
	Primary key:
		Unique, and not null
		Only one primary key, becuase we want to only use one to identification( eliminate confusion)

	Candidate Key
		unique and not null, can be primary key but not. Candidate > Primary key
		when PK is decided, candidate key disappear and just PK and alternative key
		primary key + alternate key = Candidate key
	Composite key
		combination is unique an not null
		can be composite primary key or composite foreign key
	Foreign key
		can be duplicated
		possible to be null (depend on business)
		foreign key can reference to other table(parent table), can be primary key, candidate key, or alternate key, or composite key (unless unique and not null)
	Unique key
		must be unique, can have null
	Surrogate key
		in dimension tables in DWH, not much use in fact tables
		unique + not null + Auto generated number
		in OLAP, surrogate key

Normalization
	in logical phase
	Organizing the data efficiently in a DB to avoid data anamolies and reduce the redundacy
	1. DELTE
	2. INSERT
	3. UPDATE

	1NF
		1. Identify Prime Attribute
		2. Each attribute should have atomic values
		3. No repeated columns
		4. Make sure all non prime attributes are directly or indirectly dependent on Prime Attribute
	2NF
		1. is in the 1NF
		2. Avoid partial depenency(reduce the composite key, because if do not have composite key, there will not be partial dependency)
	3NF
		1.is in the 2NF
		2.Avoid transitive dependency
	BCNF
	4NF
	
	in general, no more than 3NF, because more normal form will grow the number of talbes and thus will reduce the performance when join
	Usually organizations normalize DBs upto third normal form, because with 3NF there is a fine balance between READ(SELECT statement) performance and QUALITY of the data. If organizations go beyond 3rd NF, number of tables will be more and READ performance impacts drastically

	Dependency
		It defines how a non prime attribute is associated or identified by a prime attribute
		1. Full
		2. Partial
		3. Transitive

Relationship:
	1:1 one to one
		table a: primary key
		table b: foreign key + unique key
	1:M one to many
		table a: primary key
		table b: foreign key 
	M:N many to many
		conjuction/bridge table
		break to 2 1:M relations
		
Relationship Participation (optionality)
	Defines the role of engagement of an entity in a relation. It should be defined from Table A to Table B and Table B to Table A, in both directions. We need to define participation of both entities in the relation.n two tables(entities)
	Two entities
	both directions
	Match records
	1. Fully Participating
	
		All instances involved in relationship
		table A: can have 0 or one or more in order B
		table B: must has foreign key in order A
		EX. cust and order, all order has a cust, not all custs have order

	2. Partial Participating
		only some instances involved in relationship

strong relation(identifying relationship)-Week entity: 
	We talk this relation between a pair of parent and child tables, if this M:N, we break it to two relatonship by bridge(conjunction)
	FK + Not Null(identifying, identifying only see child table)
	Existence dependency
	== full participating(child table)
	only child table can be week entity
	EX. table cust: 
		table order: week entity, relationship is strong

Week relation(Exsistence dependency):
	FK + Null
	bidirection partial participting

Degrees
	How many entity involved in defiening relationship
	Unary 1: Fk in the same table depend on PK
	Binary 2: M:N many to many, still binary relation although should have bridge table
	Ternary 3: more than 3 is not good in relation. The best is make binary

ER Diagram

	-Chens Notation
		Easy to understand
		Entity - Boxed
		Attribute - Oval or circle
		Relationship - Diamond (verb)
		Tools: Visio
	-Crow's Feet Notation (INFORMATION ENGINEERING MODEL) (IE)
		ER-Diagram focusing more on analytical design for Database or Data Warehouse. 
		Connection Symbols  disply relationships
		Entity and Attributes in table like format
		Tools: ERwin
		Relationship:
			one -- Many
			Optional -- Mandatory

Reverse Engineering

	DB --> Logical model --> New DB
	Data Migration methods: ETL, SQL Scripts, BCP-BULK-INSERT
	Reverse Engineering - It is a process of taking an existing physical database structure into a logical model, to make some structural changes in the model for supporting new business rules, or to support growing business.
Scenarios for Reverse Engineering
	1. If some business established sometime back and were using a database developed. After few years if the business has grown and need to support chaning requirements of customers they might need to modify the DB.
	2. If an organization wants to migrate to different platform with changed structure of database but still holding majority of structure same they can go for it.
	3. Some organizations provide services to various other organizations and these services are similar Ex: Bill review, might use same structured databases for all their clients with some changes for each of the clients. In this case they can use reverse engineering concept.

When to not use Reverse Engineering
	1. When changes required in existing database are not major or less than 10-15%, reverse engineering is not a good idea.
	2. When changes required are huge around or over 80%

Data Integrity - It refers to maintenance of data quality standards according to business needs/rules including the rules defined by the domain (industry) or governing authorities.

	1. Entity Level - Every record in an entity can be uniquely identified.
		We can achieve this using PK or UK+Not Null
	2. Domain Integrity - It defines what are the values that can be entered into a particular column.
		The value in these specific columns is not available
		We maintain this using Data Type (this is basic level). Check constraint is another option
		Ex: SSN should be 9 characters and all of them has to be numbers. Same with phone number.
		Validating AGE, for selling smokes or liquor or some counter-top medication.
	3. Referential Integrity - It refers to the maintenance or implementation of relationship in which child table inherits values from parent table and values to child table are only allowed if they exist in parent table.
		We maintain this using PK-FK combination. Same thing can be achieved using Triggers.
	4. User Defined Integrity -	These are some complex business rules defined within the scope of business.
		The "INSERT" action is not allowed (the entire row is not avaiable)
		We maintain this using Procedures, Functions and Triggers.
		Ex: Re-ordering certain inventory which hits the order limit threshold
		IRA account example
		Notifying a team or admin based on certain activity in the database.

Roles of BA
1. He/She acts like a liaison (bridge) between development (technical team) and users.
2. Responsible for gathering requirements along with developers. (in some cases all the requirements are gathered by BA)
3. Create documentation for developers (such as mapping doc) and for users (like BRD)
4. Organize meetings and in some cases acts like a SCRUM master.

Roles of DA
1. Analyze source systems such as flat files, databases, excel files etc.
2. Identify data anamolies and
